# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from offb_posctl/controlstate.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class controlstate(genpy.Message):
  _md5sum = "fa885756731fe76aac6c7868ca11c7f6"
  _type = "offb_posctl/controlstate"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
int16 discrepointpersecond
int16 inicounter
int16 arraylength
float32 wall_z
float32 wall_y
float32 parabolictime
float32[] thrustarray
float32[] tauarray
float32[] phiarray
float32[] thetaarray
float32[] stateXarray
float32[] stateYarray
float32[] stateZarray
float32[] stateVXarray
float32[] stateVYarray
float32[] stateVZarray
float32[] stateAXarray
float32[] stateAYarray
float32[] stateAZarray
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','discrepointpersecond','inicounter','arraylength','wall_z','wall_y','parabolictime','thrustarray','tauarray','phiarray','thetaarray','stateXarray','stateYarray','stateZarray','stateVXarray','stateVYarray','stateVZarray','stateAXarray','stateAYarray','stateAZarray']
  _slot_types = ['std_msgs/Header','int16','int16','int16','float32','float32','float32','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,discrepointpersecond,inicounter,arraylength,wall_z,wall_y,parabolictime,thrustarray,tauarray,phiarray,thetaarray,stateXarray,stateYarray,stateZarray,stateVXarray,stateVYarray,stateVZarray,stateAXarray,stateAYarray,stateAZarray

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(controlstate, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.discrepointpersecond is None:
        self.discrepointpersecond = 0
      if self.inicounter is None:
        self.inicounter = 0
      if self.arraylength is None:
        self.arraylength = 0
      if self.wall_z is None:
        self.wall_z = 0.
      if self.wall_y is None:
        self.wall_y = 0.
      if self.parabolictime is None:
        self.parabolictime = 0.
      if self.thrustarray is None:
        self.thrustarray = []
      if self.tauarray is None:
        self.tauarray = []
      if self.phiarray is None:
        self.phiarray = []
      if self.thetaarray is None:
        self.thetaarray = []
      if self.stateXarray is None:
        self.stateXarray = []
      if self.stateYarray is None:
        self.stateYarray = []
      if self.stateZarray is None:
        self.stateZarray = []
      if self.stateVXarray is None:
        self.stateVXarray = []
      if self.stateVYarray is None:
        self.stateVYarray = []
      if self.stateVZarray is None:
        self.stateVZarray = []
      if self.stateAXarray is None:
        self.stateAXarray = []
      if self.stateAYarray is None:
        self.stateAYarray = []
      if self.stateAZarray is None:
        self.stateAZarray = []
    else:
      self.header = std_msgs.msg.Header()
      self.discrepointpersecond = 0
      self.inicounter = 0
      self.arraylength = 0
      self.wall_z = 0.
      self.wall_y = 0.
      self.parabolictime = 0.
      self.thrustarray = []
      self.tauarray = []
      self.phiarray = []
      self.thetaarray = []
      self.stateXarray = []
      self.stateYarray = []
      self.stateZarray = []
      self.stateVXarray = []
      self.stateVYarray = []
      self.stateVZarray = []
      self.stateAXarray = []
      self.stateAYarray = []
      self.stateAZarray = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3h3f().pack(_x.discrepointpersecond, _x.inicounter, _x.arraylength, _x.wall_z, _x.wall_y, _x.parabolictime))
      length = len(self.thrustarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.thrustarray))
      length = len(self.tauarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.tauarray))
      length = len(self.phiarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.phiarray))
      length = len(self.thetaarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.thetaarray))
      length = len(self.stateXarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.stateXarray))
      length = len(self.stateYarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.stateYarray))
      length = len(self.stateZarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.stateZarray))
      length = len(self.stateVXarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.stateVXarray))
      length = len(self.stateVYarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.stateVYarray))
      length = len(self.stateVZarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.stateVZarray))
      length = len(self.stateAXarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.stateAXarray))
      length = len(self.stateAYarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.stateAYarray))
      length = len(self.stateAZarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.stateAZarray))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.discrepointpersecond, _x.inicounter, _x.arraylength, _x.wall_z, _x.wall_y, _x.parabolictime,) = _get_struct_3h3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.thrustarray = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.tauarray = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.phiarray = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.thetaarray = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateXarray = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateYarray = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateZarray = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateVXarray = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateVYarray = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateVZarray = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateAXarray = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateAYarray = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateAZarray = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3h3f().pack(_x.discrepointpersecond, _x.inicounter, _x.arraylength, _x.wall_z, _x.wall_y, _x.parabolictime))
      length = len(self.thrustarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.thrustarray.tostring())
      length = len(self.tauarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.tauarray.tostring())
      length = len(self.phiarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.phiarray.tostring())
      length = len(self.thetaarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.thetaarray.tostring())
      length = len(self.stateXarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.stateXarray.tostring())
      length = len(self.stateYarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.stateYarray.tostring())
      length = len(self.stateZarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.stateZarray.tostring())
      length = len(self.stateVXarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.stateVXarray.tostring())
      length = len(self.stateVYarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.stateVYarray.tostring())
      length = len(self.stateVZarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.stateVZarray.tostring())
      length = len(self.stateAXarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.stateAXarray.tostring())
      length = len(self.stateAYarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.stateAYarray.tostring())
      length = len(self.stateAZarray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.stateAZarray.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.discrepointpersecond, _x.inicounter, _x.arraylength, _x.wall_z, _x.wall_y, _x.parabolictime,) = _get_struct_3h3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.thrustarray = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.tauarray = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.phiarray = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.thetaarray = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateXarray = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateYarray = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateZarray = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateVXarray = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateVYarray = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateVZarray = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateAXarray = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateAYarray = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.stateAZarray = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3h3f = None
def _get_struct_3h3f():
    global _struct_3h3f
    if _struct_3h3f is None:
        _struct_3h3f = struct.Struct("<3h3f")
    return _struct_3h3f
