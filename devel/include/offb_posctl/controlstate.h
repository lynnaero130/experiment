// Generated by gencpp from file offb_posctl/controlstate.msg
// DO NOT EDIT!


#ifndef OFFB_POSCTL_MESSAGE_CONTROLSTATE_H
#define OFFB_POSCTL_MESSAGE_CONTROLSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace offb_posctl
{
template <class ContainerAllocator>
struct controlstate_
{
  typedef controlstate_<ContainerAllocator> Type;

  controlstate_()
    : header()
    , discrepointpersecond(0)
    , inicounter(0)
    , arraylength(0)
    , wall_z(0.0)
    , wall_y(0.0)
    , parabolictime(0.0)
    , thrustarray()
    , tauarray()
    , phiarray()
    , thetaarray()
    , stateXarray()
    , stateYarray()
    , stateZarray()
    , stateVXarray()
    , stateVYarray()
    , stateVZarray()
    , stateAXarray()
    , stateAYarray()
    , stateAZarray()  {
    }
  controlstate_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , discrepointpersecond(0)
    , inicounter(0)
    , arraylength(0)
    , wall_z(0.0)
    , wall_y(0.0)
    , parabolictime(0.0)
    , thrustarray(_alloc)
    , tauarray(_alloc)
    , phiarray(_alloc)
    , thetaarray(_alloc)
    , stateXarray(_alloc)
    , stateYarray(_alloc)
    , stateZarray(_alloc)
    , stateVXarray(_alloc)
    , stateVYarray(_alloc)
    , stateVZarray(_alloc)
    , stateAXarray(_alloc)
    , stateAYarray(_alloc)
    , stateAZarray(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _discrepointpersecond_type;
  _discrepointpersecond_type discrepointpersecond;

   typedef int16_t _inicounter_type;
  _inicounter_type inicounter;

   typedef int16_t _arraylength_type;
  _arraylength_type arraylength;

   typedef float _wall_z_type;
  _wall_z_type wall_z;

   typedef float _wall_y_type;
  _wall_y_type wall_y;

   typedef float _parabolictime_type;
  _parabolictime_type parabolictime;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _thrustarray_type;
  _thrustarray_type thrustarray;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _tauarray_type;
  _tauarray_type tauarray;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _phiarray_type;
  _phiarray_type phiarray;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _thetaarray_type;
  _thetaarray_type thetaarray;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _stateXarray_type;
  _stateXarray_type stateXarray;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _stateYarray_type;
  _stateYarray_type stateYarray;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _stateZarray_type;
  _stateZarray_type stateZarray;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _stateVXarray_type;
  _stateVXarray_type stateVXarray;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _stateVYarray_type;
  _stateVYarray_type stateVYarray;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _stateVZarray_type;
  _stateVZarray_type stateVZarray;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _stateAXarray_type;
  _stateAXarray_type stateAXarray;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _stateAYarray_type;
  _stateAYarray_type stateAYarray;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _stateAZarray_type;
  _stateAZarray_type stateAZarray;





  typedef boost::shared_ptr< ::offb_posctl::controlstate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::offb_posctl::controlstate_<ContainerAllocator> const> ConstPtr;

}; // struct controlstate_

typedef ::offb_posctl::controlstate_<std::allocator<void> > controlstate;

typedef boost::shared_ptr< ::offb_posctl::controlstate > controlstatePtr;
typedef boost::shared_ptr< ::offb_posctl::controlstate const> controlstateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::offb_posctl::controlstate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::offb_posctl::controlstate_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace offb_posctl

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'offb_posctl': ['/home/uav/lzy_ws/src/offb_posctl/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::offb_posctl::controlstate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offb_posctl::controlstate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offb_posctl::controlstate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offb_posctl::controlstate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offb_posctl::controlstate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offb_posctl::controlstate_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::offb_posctl::controlstate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa885756731fe76aac6c7868ca11c7f6";
  }

  static const char* value(const ::offb_posctl::controlstate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa885756731fe76aULL;
  static const uint64_t static_value2 = 0xac6c7868ca11c7f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::offb_posctl::controlstate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "offb_posctl/controlstate";
  }

  static const char* value(const ::offb_posctl::controlstate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::offb_posctl::controlstate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"int16 discrepointpersecond\n"
"int16 inicounter\n"
"int16 arraylength\n"
"float32 wall_z\n"
"float32 wall_y\n"
"float32 parabolictime\n"
"float32[] thrustarray\n"
"float32[] tauarray\n"
"float32[] phiarray\n"
"float32[] thetaarray\n"
"float32[] stateXarray\n"
"float32[] stateYarray\n"
"float32[] stateZarray\n"
"float32[] stateVXarray\n"
"float32[] stateVYarray\n"
"float32[] stateVZarray\n"
"float32[] stateAXarray\n"
"float32[] stateAYarray\n"
"float32[] stateAZarray\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::offb_posctl::controlstate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::offb_posctl::controlstate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.discrepointpersecond);
      stream.next(m.inicounter);
      stream.next(m.arraylength);
      stream.next(m.wall_z);
      stream.next(m.wall_y);
      stream.next(m.parabolictime);
      stream.next(m.thrustarray);
      stream.next(m.tauarray);
      stream.next(m.phiarray);
      stream.next(m.thetaarray);
      stream.next(m.stateXarray);
      stream.next(m.stateYarray);
      stream.next(m.stateZarray);
      stream.next(m.stateVXarray);
      stream.next(m.stateVYarray);
      stream.next(m.stateVZarray);
      stream.next(m.stateAXarray);
      stream.next(m.stateAYarray);
      stream.next(m.stateAZarray);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controlstate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::offb_posctl::controlstate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::offb_posctl::controlstate_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "discrepointpersecond: ";
    Printer<int16_t>::stream(s, indent + "  ", v.discrepointpersecond);
    s << indent << "inicounter: ";
    Printer<int16_t>::stream(s, indent + "  ", v.inicounter);
    s << indent << "arraylength: ";
    Printer<int16_t>::stream(s, indent + "  ", v.arraylength);
    s << indent << "wall_z: ";
    Printer<float>::stream(s, indent + "  ", v.wall_z);
    s << indent << "wall_y: ";
    Printer<float>::stream(s, indent + "  ", v.wall_y);
    s << indent << "parabolictime: ";
    Printer<float>::stream(s, indent + "  ", v.parabolictime);
    s << indent << "thrustarray[]" << std::endl;
    for (size_t i = 0; i < v.thrustarray.size(); ++i)
    {
      s << indent << "  thrustarray[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.thrustarray[i]);
    }
    s << indent << "tauarray[]" << std::endl;
    for (size_t i = 0; i < v.tauarray.size(); ++i)
    {
      s << indent << "  tauarray[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tauarray[i]);
    }
    s << indent << "phiarray[]" << std::endl;
    for (size_t i = 0; i < v.phiarray.size(); ++i)
    {
      s << indent << "  phiarray[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.phiarray[i]);
    }
    s << indent << "thetaarray[]" << std::endl;
    for (size_t i = 0; i < v.thetaarray.size(); ++i)
    {
      s << indent << "  thetaarray[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.thetaarray[i]);
    }
    s << indent << "stateXarray[]" << std::endl;
    for (size_t i = 0; i < v.stateXarray.size(); ++i)
    {
      s << indent << "  stateXarray[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.stateXarray[i]);
    }
    s << indent << "stateYarray[]" << std::endl;
    for (size_t i = 0; i < v.stateYarray.size(); ++i)
    {
      s << indent << "  stateYarray[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.stateYarray[i]);
    }
    s << indent << "stateZarray[]" << std::endl;
    for (size_t i = 0; i < v.stateZarray.size(); ++i)
    {
      s << indent << "  stateZarray[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.stateZarray[i]);
    }
    s << indent << "stateVXarray[]" << std::endl;
    for (size_t i = 0; i < v.stateVXarray.size(); ++i)
    {
      s << indent << "  stateVXarray[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.stateVXarray[i]);
    }
    s << indent << "stateVYarray[]" << std::endl;
    for (size_t i = 0; i < v.stateVYarray.size(); ++i)
    {
      s << indent << "  stateVYarray[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.stateVYarray[i]);
    }
    s << indent << "stateVZarray[]" << std::endl;
    for (size_t i = 0; i < v.stateVZarray.size(); ++i)
    {
      s << indent << "  stateVZarray[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.stateVZarray[i]);
    }
    s << indent << "stateAXarray[]" << std::endl;
    for (size_t i = 0; i < v.stateAXarray.size(); ++i)
    {
      s << indent << "  stateAXarray[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.stateAXarray[i]);
    }
    s << indent << "stateAYarray[]" << std::endl;
    for (size_t i = 0; i < v.stateAYarray.size(); ++i)
    {
      s << indent << "  stateAYarray[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.stateAYarray[i]);
    }
    s << indent << "stateAZarray[]" << std::endl;
    for (size_t i = 0; i < v.stateAZarray.size(); ++i)
    {
      s << indent << "  stateAZarray[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.stateAZarray[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OFFB_POSCTL_MESSAGE_CONTROLSTATE_H
